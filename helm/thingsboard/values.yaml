# Default values for thingsboard.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


global:
  image:
    server: docker.io
    tag: "3.3.3"
    pullSecrets: []
    pullPolicy: Always

nameOverride: ""
fullnameOverride: ""

node:
  loadDemo: false

  jsonLogs: false

  replicaCount: 1
  
  image:
    repository: thingsboard/tb-node

    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"

  port:
    http: 8080
    rpc: 9090
  
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  
  podAnnotations: {}
  
  podSecurityContext: {}
    # fsGroup: 2000
  
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  
  service:
    type: ClusterIP
    port: 80
  
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  
  tolerations: []
  
  affinity: {}

mqttTransport:
  jsonLogs: false
  image:
    repository: thingsboard/tb-mqtt-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 1
  port: 8081
  timeout: 10000
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8883
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

httpTransport:
  jsonLogs: false
  image:
    repository: thingsboard/tb-http-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 1
  port: 8082
  timeout: 10000
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8082
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

coapTransport:
  jsonLogs: false
  image:
    repository: thingsboard/tb-coap-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 1
  port: 8083
  timeout: 10000
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8083
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

cassandraInitDB:
  keyspace: thingsboard
  replication:
    class: SimpleStrategy
    factor: 1

cassandra:
  # Database can be either postgres or hybrid (entities in postgres and timeseries in cassandra)
  # for an postgresql database set cassandra.enabled as false
  # for an hybrid database set cassandra.enabled as true
  enabled: false
  replicaCount: 1
  initDBConfigMap: '{{ .Release.Name }}-cassandra-init-db'
  dbUser:
    password: setplease

postgresql-ha:
  nameOverride: postgresql-ha
  postgresql:
    database: thingsboard
    replicaCount: 1
    password: setplease
    repmgrPassword: setplease
  postgresqlImage:
    tag: 12
  pgpool:
    adminPassword: setplease
    replicaCount: 1
  pgpoolImage:
    tag: 4

redis:
  # Set architecture to either standalone or replication
  architecture: standalone
